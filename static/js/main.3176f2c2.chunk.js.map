{"version":3,"sources":["components/ConnectionStatus.js","components/CheckBox.js","components/Publisher.js","components/Subscriber.js","components/SubscriberForm.js","App.js","config.js","index.js"],"names":["ConnectionStatus","status","this","props","connected","className","React","Component","CheckBox","onChange","event","isChecked","currentTarget","checked","setState","state","id","uniqueId","initialChecked","prevProps","prevState","htmlFor","label","type","Subscriber","renderSubscribers","subscribers","console","log","map","streamId","setAudio","audio","setVideo","video","showBoundingBox","boxActive","canvas","document","getElementById","getContext","ctx","clearRect","width","height","strokeRect","onError","err","error","message","properties","subscribeToAudio","subscribeToVideo","SubscriberForm","setAPIKey","api_key","target","value","setSessionId","session_id","setToken","token","handleSubmit","preventDefault","bind","sessionEvents","sessionConnected","sessionDisconnected","apiKey","sessionId","eventHandlers","onSubmit","for","name","preloadScript","App","ReactDOM","render","config"],"mappings":"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","file":"static/js/main.3176f2c2.chunk.js","sourcesContent":["import React from 'react';\n\nclass ConnectionStatus extends React.Component {\n    render() {\n        let status = this.props.connected ? 'Connected' : 'Disconnected';\n        return (\n            <div className=\"ConnectionStatus\">\n                <strong>Status:</strong> {status}\n            </div>\n        );\n    }\n}\n\nexport default ConnectionStatus;","import React from 'react';\nimport { uniqueId } from 'lodash';\n\nclass CheckBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: uniqueId('Checkbox'),\n      isChecked: this.props.initialChecked\n    };\n  }\n\n  onChange = (event) => {\n    let isChecked = event.currentTarget.checked;\n    this.setState({ isChecked });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevState.isChecked !== this.state.isChecked &&\n      typeof this.props.onChange === 'function'\n    ) {\n      this.props.onChange(this.state.isChecked);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n\n        <label htmlFor={this.state.id}>\n          {this.props.label}\n        </label>\n\n        <input\n          type=\"checkbox\"\n          checked={this.state.isChecked}\n          id={this.state.id}\n          onChange={this.onChange}\n        />\n        \n      </div>\n    );\n  }\n}\nexport default CheckBox;","import React from 'react';\nimport { OTPublisher } from 'opentok-react';\nimport CheckBox from './CheckBox';\n\nclass Publisher extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n            audio: false,\n            video: false,\n            videoSource: 'camera'\n        };\n    }\n\n    setAudio = (audio) => {\n        this.setState({ audio });\n    }\n    setVideo = (video) => {\n        this.setState({ video });\n    } \n    changeVideoSource = (videoSource) => {\n        (this.state.videoSource !== 'camera') ? this.setState({videoSource: 'camera'}) : this.setState({videoSource: 'screen'})\n    }\n    onError = (err) => {\n        this.setState({ error: `Failed to publish: ${err.message}`});\n    }\n\n    render() {\n        return (\n            <div className=\"publisher\">\n                Publisher\n\n                {this.state.error ? <div id=\"error\">{this.state.error}</div> : null}\n\n                <OTPublisher \n                    properties={{\n                        publishAudio: this.state.audio,\n                        publishVideo: this.state.video,\n                        videoSource: this.state.videoSource === 'screen' ? 'screen' : undefined\n                    }}\n                    onError={this.onError}\n                />\n\n                <CheckBox \n                    label=\"Share Screen\"\n                    onChange={this.changeVideoSource}\n                />\n\n                <CheckBox\n                    label=\"Publish Audio\"\n                    initialChecked={this.state.audio}\n                    onChange={this.setAudio}\n                />\n\n                <CheckBox\n                    label=\"Publish Video\"\n                    initialChecked={this.state.video}\n                    onChange={this.setVideo}\n                />\n            </div>\n        );\n    }\n}\nexport default Publisher;\n\n","import React from 'react';\nimport { OTSubscriber, OTSubscriberView } from 'opentok-react';\nimport CheckBox from './CheckBox';\nimport '../App.css';\n\nclass Subscriber extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n            audio: true,\n            video: true,\n            boxActive: false\n        };        \n    }\n\n    renderSubscribers = (subscribers) => {\n        console.log(\"Rendering subscribers!\");\n        return subscribers.map((streamId) => (\n            <OTSubscriberView streamId={streamId} />\n        ));\n    };\n\n    setAudio = (audio) => {\n        this.setState({ audio });\n    }\n    setVideo = (video) => {\n        this.setState({ video });\n    }\n    showBoundingBox = (boxActive) => {\n        var canvas = document.getElementById('bounding-box');\n        if (canvas && canvas.getContext) {\n            var ctx = canvas.getContext('2d');\n\n            if (this.state.boxActive) {\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n            } else {\n                ctx.strokeRect(50, 50, 50, 50);\n            }\n        }\n\n        this.setState({ boxActive });\n    }\n    onError = (err) => {\n        this.setState({ error: `Failed to subscribe: ${err.message}` });\n    }\n\n    render() {\n        return (\n            <div className=\"subscriber\">\n                {this.state.error ? <div id=\"error\">{this.state.error}</div> : null}\n\n                <div className=\"subscriber-box\">\n                <OTSubscriber\n                    properties={{\n                        subscribeToAudio: this.state.audio,\n                        subscribeToVideo: this.state.video\n                    }}\n                    onError={this.onError}\n                >\n                    {this.renderSubscribers}\n                </OTSubscriber>\n                </div>\n                \n                <div className=\"bounding-box\">\n                    <canvas id=\"bounding-box\"></canvas>\n                </div>\n\n                <CheckBox\n                    label=\"Subscribe to Audio\"\n                    initialChecked={this.state.audio}\n                    onChange={this.setAudio}\n                />\n                <CheckBox\n                    label=\"Subscribe to Video\"\n                    initialChecked={this.state.video}\n                    onChange={this.setVideo}\n                />\n                <CheckBox \n                    label=\"Show Bounding Box\"\n                    initialChecked={this.state.boxActive}\n                    onChange={this.showBoundingBox}\n                />\n\n                \n            </div>\n            \n            \n        );\n    }\n}\nexport default Subscriber;","import React from 'react';\nimport { OTSession, OTStreams, preloadScript } from 'opentok-react';\nimport ConnectionStatus from './ConnectionStatus';\nimport Subscriber from './Subscriber';\nimport { OTPublisher } from 'opentok-react-data-clone';\nimport '../App.css';\n\nclass SubscriberForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n            connected: false,\n            api_key: props.api_key,\n            session_id: props.session_id,\n            token: props.token,\n        };\n\n        this.setAPIKey = this.setAPIKey.bind(this);\n        this.setSessionId = this.setSessionId.bind(this);\n        this.setToken = this.setToken.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.sessionEvents = {\n\n            sessionConnected: () => {\n                this.setState({\n                    connected: true\n                });\n            },\n            sessionDisconnected: () => {\n                this.setState({\n                    connected: false\n                });\n            }\n      \n         };\n    }\n\n    onError = (err) => {\n        this.setState({\n            error: `Failed to connect: ${err.message}`\n        });\n    }\n\n    setAPIKey = (event) => {\n        this.setState({ api_key: event.target.value });\n    }\n\n    setSessionId = (event) => {\n        this.setState({ session_id: event.target.value });\n    }\n\n    setToken = (event) => {\n        this.setState({ token: event.target.value });\n    }\n\n    handleSubmit = (event) => {\n        // alert(this.state.api_key + ' ' + this.state.session_id + ' ' + this.state.token);\n        console.log(\"Submitting keys!\");\n        this.setState({ connected: true })\n\n        \n        // this.render();\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <view>\n                {this.state.connected && this.state.api_key && this.state.session_id && this.state.token? \n                    <OTSession\n                        apiKey={this.state.api_key}\n                        sessionId={this.state.session_id}\n                        token={this.state.token}\n                        eventHandlers={this.sessionEvents}\n                        onError={this.onError}\n                        >\n            \n                        {this.state.error ? <div id=\"error\">{this.state.error}</div> : null}\n            \n                        <ConnectionStatus connected={this.state.connected} />    \n\n                        <OTPublisher />    \n            \n                        <OTStreams>\n                            <Subscriber />\n                        </OTStreams>\n\n                    </OTSession>\n                    : <form className=\"subscriber-form\" onSubmit={this.handleSubmit}>\n                    <h1>TokBox React Demo</h1>\n                    <ul>\n                        <li>\n                            <label for=\"api_key\">API Key</label>\n                            <input name=\"api_key\" type=\"text\" value={this.state.api_key} onChange={this.setAPIKey} />\n                            <span>Enter a valid TokBox API Key</span>\n                        </li>\n                        <li>\n                            <label for=\"session_Id\">Session ID</label>\n                            <input name=\"session_Id\" type=\"text\" value={this.state.session_id} onChange={this.setSessionId} />\n                            <span>Enter a valid Session ID for your TokBox Session</span>\n                        </li>\n                        <li>\n                            <label for=\"token\">Token</label>\n                            <input name=\"token\" type=\"text\" value={this.state.token} onChange={this.setToken} />\n                            <span>Enter a valid Token for your TokBox Session</span>\n                        </li>\n                        <li>\n                            <input type=\"submit\" value=\"submit\" />\n                        </li>\n                    </ul>\n                 </form>}\n            </view>\n        );\n    }\n}\n\nexport default preloadScript(SubscriberForm);","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { OTSession, OTStreams, preloadScript } from 'opentok-react';\nimport ConnectionStatus from './components/ConnectionStatus';\nimport Publisher from './components/Publisher';\n//import Subscriber from './components/Subscriber';\nimport SubscriberForm from './components/SubscriberForm';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      connected: false\n    };\n\n    this.sessionEvents = {\n\n      sessionConnected: () => {\n        this.setState({\n          connected: true\n        });\n      },\n      sessionDisconnected: () => {\n        this.setState({\n          connected: false\n        });\n      }\n\n    };\n  }\n\n  onError = (err) => {\n    this.setState({\n      error: `Failed to connect: ${err.message}`\n    });\n  }\n\n  render() {\n    return (\n      //<OTSession\n      //  apiKey={this.props.apiKey}\n      //  sessionId={this.props.sessionId}\n      //  token={this.props.token}\n      //  eventHandlers={this.sessionEvents}\n      //  onError={this.onError}\n      //  >\n\n      //  {this.state.error ? <div id=\"error\">{this.state.error}</div> : null}\n\n      //  <ConnectionStatus connected={this.state.connected} />\n\n        <SubscriberForm \n          name=\"Form\"\n          api_key={this.props.apiKey}\n          session_id={this.props.sessionId}\n          token={this.props.token}\n        />\n\n       // <Publisher />\n\n        \n\n      //</OTSession>  \n    );\n  }\n}\n\nexport default preloadScript(App);\n\n//<OTStreams>\n//<Subscriber />\n//</OTStreams>","export default {\n  API_KEY: '46418012',\n  SESSION_ID: '2_MX40NjQxODAxMn5-MTU2ODA4NTkyNzA5MX5UT2NXR2w3ZTR1aElNRmFTelB1RWRaZkp-fg',\n  TOKEN: 'T1==cGFydG5lcl9pZD00NjQxODAxMiZzaWc9MmIxNDQwYTkyM2NmZThiZjExYjY1Mjg2YmExZmMxOTg3NWE4YjhmNTpzZXNzaW9uX2lkPTJfTVg0ME5qUXhPREF4TW41LU1UVTJPREE0TlRreU56QTVNWDVVVDJOWFIydzNaVFIxYUVsTlJtRlRlbEIxUldSYVprcC1mZyZjcmVhdGVfdGltZT0xNTY4MDg1OTQxJm5vbmNlPTAuNjE2OTI4NzIxMDE0NTE3NiZyb2xlPW1vZGVyYXRvciZleHBpcmVfdGltZT0xNTcwNjc3OTQxJmluaXRpYWxfbGF5b3V0X2NsYXNzX2xpc3Q9'\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport config from './config'\n\nReactDOM.render(<App \n  apiKey={config.API_KEY}\n  sessionId={config.SESSION_ID}\n  token={config.TOKEN}\n/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}